;----------------------------------------------------------------------
; This shader only accepts 1 vertex. Its corresponding geometry shader
; outputs 2 triangles forming a quad of 8x8.
;
; This is currently used for writing to the 1024x1024 full mode 7
; texture.
;----------------------------------------------------------------------
; INPUT
;
; v0: vertex 		(x0, y0, z0, w = updateFrameCount)
; v1: texcoord 		(tx0, ty0)
; v2: color 		
	

; OUTPUT
.out 	outpos 	position
.out 	outtex  texcoord0
.out	outcol	color

; Uniforms
.fvec 		gProjection[4]		; r10
.fvec 		gTextureScale		; r14
.fvec 		gUpdateFrame		; r15

.constf MINUSONE 				(-1, -1, -1, -1)

.constf EIGHT	 				(8, 8, 8, 8)
.constf ONE						(1, 1, 1, 1)

.gsh
.entry gmain
.proc gmain

	; the upper left corner vertex.
	mov 	r10, v0							; r10 = (x0, y0, z, updateFrameCount)
	mov 	r1, v1							; r1 = (tx0, ty0)

	mov		r2, gUpdateFrame				; r2 = gUpdateFrame 
	cmp		r10.w, lt, lt, r2.w				; if r10.w < gUpdateFrame
	jmpc	cmp.x, do_not_draw				; then, go to do_not_draw

	mov		r7, ONE
	mov		r10.w, r7.w						; r10 = (x0, y0, z, 1)
	
	; outpos = projection * in.pos
	dp4 	r0.x, gProjection[0].wzyx, r10
	dp4 	r0.y, gProjection[1].wzyx, r10
	dp4 	r0.z, gProjection[2].wzyx, r10
	dp4 	r0.w, gProjection[3].wzyx, r10

	; outtex = in.texcoord
	mul 	r1, gTextureScale, r1

	; compute the 2nd lower-right corner vertex
	mov		r8, EIGHT						; r8 = (8, 8, 8, 8)

	mov		r13, v0							; r13 = (x0, y0, z, ?)
	mov		r13.w, r7.w						; r13 = (x0, y0, z, 1)
	mov		r4, v1							; r4 = (tx0, ty0)
	add		r13.xy, r8.xy, r13.xy			; r13 = (x0 + 8, y0 + 8, z, 1)
	add		r4.xy, r8.xy, r4.xy				; r4 = (tx0 + 8, ty0 + 8)

	; outpos = projection * in.pos
	dp4 	r3.x, gProjection[0].wzyx, r13
	dp4 	r3.y, gProjection[1].wzyx, r13
	dp4 	r3.z, gProjection[2].wzyx, r13
	dp4 	r3.w, gProjection[3].wzyx, r13

	; outtex = in.texcoord
	mul 	r4, gTextureScale, r4

	; Emit the standard:
	;    x0,y0,tx0,ty0     x1,y0,tx1,ty0
	;                 +---+
	;                 |  /|
	;                 | / |
	;                 |/  |
	;                 +---+
	;    x0,y1,tx0,ty1     x1,y1,tx1,ty1
	;
	setemit 0							; top-left
	mov 	outpos.xz, 	r0.xz
	mov		outpos.y,   r0.y
	mov 	outtex.x, 	r1.x
	mov 	outtex.y, 	r1.y
	mov		outcol,		v2
	emit 

	setemit 1							; top-right
	mov 	outpos.xz, 	r3.xz
	mov		outpos.y,   r0.y
	mov 	outtex.x, 	r4.x
	mov 	outtex.y, 	r1.y
	mov		outcol,		v2
	emit 
	
	setemit 2, prim						; bottom-left
	mov 	outpos.xz, 	r0.xz
	mov		outpos.y,   r3.y
	mov 	outtex.x, 	r1.x
	mov 	outtex.y, 	r4.y
	mov		outcol,		v2
	emit 

	setemit 0, prim	inv					; bottom-right
	mov 	outpos.xz, 	r3.xz
	mov		outpos.y,   r3.y
	mov 	outtex.x, 	r4.x
	mov 	outtex.y, 	r4.y
	mov		outcol,		v2
	emit 

	end
	nop

do_not_draw:
	end

.end
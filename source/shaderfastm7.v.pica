; Inputs
.alias 		inpos0 		v0		; (x, y+depth [0x4000], flip+texbase, updateFrame)
.alias 		intex 		v1		; (u, v)  or  (r, g, b, a)

; Outputs
.out 		outpos 		position
.out 		outtex 		texcoord0
.out 		outcol 		color

; Uniforms
.fvec 		projection[4]		; #0 - 3
.fvec 		textureScale		; #4
.fvec		updateFrame			; #5
.fvec		textureOffset		; #6 - Use this for Hi-res flipping
.fvec		uPadding6			; #7
.fvec		uPadding7			; #8
.fvec		uPadding8			; #9

; Constants
;.constf RGBA8_TO_FLOAT4	(0.00392156862, 0, 0, 0)
.constf RGBA8_TO_FLOAT4		(0.004032258064516, 0, 0, 0)	; Bug fix for 5-bit color conversion
.constf DEPTH 				(16384, -16384, 1, 0)
.constf V_FLIP				(0, 32768, -1, 8)
.constf H_FLIP				(16384, -16384, -1, 8)
.constf ONE_DIV_16			(0.0625, -16, 0, 8)
.constf NEGATIVE_ONE		(-1, -1, -1, -1)
.constf ZERO				(0, 0, 0, 0)

.proc main
	mov		r0, inpos0
	mov		r10, intex

	; computing texturePos
	;
	mov		r8, ONE_DIV_16
	mul		r9.y, r0.z, r8.x		; r9.y = r0.z / 16
	flr		r9.y, r9.y				; r9.y = floor (r9)			(r9.y is the base texture y coordinate)
	mul 	r7.x, r9.y, r8.y		; r7 = - r9.y * 16
	add		r9.x, r0.z, r7.x		; r9.x = r0.z - r9.y * 16	(r9.x is the base texture x coordinate)
	
	mul		r9.xy, r9.xy, r8.w 		; r9 = r9 * 8
	
	add		r10.xy, r10.xy, r9.xy

	; depth computation
	;
	mov 	r1, DEPTH
	mov		r0.z, r1.w				; r0.z = 0
	cmp 	r0.y, lt, lt, r1.x		; is r0.y < 16384?
	jmpc 	cmp.x, depth_lt_16384	; if yes then do nothing, else:
	add		r0.y, r0.y, r1.y		; r0.y = r0.y - 16384
	mov		r0.z, r1.z				; r0.z = 1
depth_lt_16384:

	mov		outpos, r0
	mov		outtex, r10

	; outcol = RGBA8_TO_FLOAT4(in.color)
	mul 	outcol, RGBA8_TO_FLOAT4.xxxx, intex

	end

.end